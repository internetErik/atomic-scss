@if $helpers-on {
	// obligatory clearfix
	.clearfix::after {
	  content: "";
	  display: table;
	  clear: both;
	}

	// converts overflow text to ellipsis
	.truncate-text {
	  white-space: nowrap;
	  overflow: hidden;
	  text-overflow: ellipsis;
	}

	// All direct children will be justified
	.justify-children {
		text-align: justify;

		&::after {
			content: "";
			display: inline-block;
			width: 100%;
			height: 0;
		}

		& > * {
			display: inline-block;
		}
	}

	// use a checkbox to show and hide sibling elements with target class
	.toggle-sibling {
		& ~ .toggle-sibling-target {
			display: none;
		}

		&:checked ~ .toggle-sibling-target {
			display: block;
		}

		&:checked ~ .toggle-sibling-target-ib {
			display: inline-block;
		}

		&:checked ~ .toggle-sibling-target-dn {
			display: none;
		}
	}

	.toggle-sibling\:h {
		& ~ .toggle-sibling-target {
			display: none;
		}

		&:hover ~ .toggle-sibling-target,
		.toggle-sibling-target:hover {
			display: block;
		}

		&:hover ~ .toggle-sibling-target-ib,
		.toggle-sibling-target-ib:hover {
			display: inline-block;
		}

		&:hover ~ .toggle-sibling-target-dn {
			display: none;
		}
	}

	.toggle-children\:h {
	  .toggle-children-target {
	    display: none;
	  }

	  &:hover .toggle-children-target,
	  .toggle-children-target:hover {
	    display: block;
	  }

	  &:hover .toggle-children-target-ib,
	  .toggle-children-target-ib:hover {
	    display: inline-block;
	  }

	  &:hover .toggle-children-target-dn {
	    display: none;
	  }
	}

	@each $bp in $helper-bps {
		$name: nth(nth($bp, 1), 2);
		$cond: nth(nth($bp, 2), 2);

		@media #{$cond} {
			.toggle-sibling\:h\@#{$name} {
				& ~ .toggle-sibling-target {
					display: none;
				}

				&:hover ~ .toggle-sibling-target,
				.toggle-sibling-target:hover {
					display: block;
				}

				&:hover ~ .toggle-sibling-target-ib,
				.toggle-sibling-target-ib:hover {
					display: inline-block;
				}

				&:hover ~ .toggle-sibling-target-dn {
					display: none;
				}
			}
		}
	}

	.hide-last-child *:last-child {
		display: none;
	}

	//use border-radius to create a circle shape
	.round-element {
		border-radius: 100%;
	}

	//center elements horizontally and/or vertically
	.center-vert {
		top: 50%;
		transform: translateY(-50%);
	}

	.center-hori {
		left: 50%;
		transform: translateX(-50%);
	}

	.center {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}

	@each $bp in $helper-bps {
		$name: nth(nth($bp, 1), 2);
		$cond: nth(nth($bp, 2), 2);

		@media #{$cond} {
			.center-vert\@#{$name} {
				top: 50%;
				transform: translateY(-50%);
			}

			.center-hori\@#{$name} {=
				left: 50%;
				transform: translateX(-50%);
			}

			.center\@#{$name} {
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
			}

			.center-off\@#{$name} {
				top: auto;
				left: auto;
				transform: initial;
			}
		}
	}

	//transforms
	.rotZ45 {
		transform: rotateZ(45deg);
	}

	.rotZ90 {
		transform: rotateZ(90deg);
	}

	.rotZ-45 {
		transform: rotateZ(-45deg);
	}

	.rotZ-90 {
		transform: rotateZ(-90deg);
	}

	.sca50 {
		transform: scale(.5, .5);
	}

	.sca150 {
		transform: scale(1.5, 1.5);
	}

	.sca200 {
		transform: scale(2, 2);
	}

	//transition settings
	.trans-op {
		transition: opacity .3s ease-in-out;
	}

	.trans-c {
		transition: color .3s ease-in-out;
	}

	.trans-bg {
		transition: background .3s ease-in-out;
	}

	.trans-transf {
		transition: transform .3s ease-in-out;
	}

	.trans-t {
		transition: top .3s ease-in-out;
	}

	.trans-b {
		transition: bottom .3s ease-in-out;
	}

	.trans-l {
		transition: left .3s ease-in-out;
	}

	.trans-r {
		transition: right .3s ease-in-out;
	}

	.trans-all {
		transition: all .3s ease-in-out;
	}
}
